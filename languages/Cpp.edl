language cpp
{
    self this

    types {
        boolean bool
        int32 int
        int64 long
        float float
        double double
        string "std::string"
        uuid "std::string"
        date long
    }

    comments {
        line "//"
        blockStart "/*"
        blockEnd "*/"
    }

    operators {
        plus "+"
        minus "-"
        times "*"
        divide "/"
        modulo "%"
        logical_not "!"
        logical_and "&&"
        logical_or "||"
        bitwise_not "~"
        bitwise_and "&"
        bitwise_or "|"
        bitwise_xor "^"
        is_equal "=="
        not_equal "!="
        greater_than ">"
        greater_than_or_equal ">="
        less_than "<"
        less_than_or_equal "<="
        select "?" ":"
        dot "."
    }

    keywords {
        alignas alignof and and_eq asm atomic_cancel atomic_commit atomic_noexcept auto
        bitand bitor bool break
        case catch char char8_t char16_t char32_t class compl concept
        const consteval constexpr constinit const_cast continue co_await co_return co_yield
        decltype default delete do double dynamic_cast
        else enum explicit export extern
        float for friend
        goto
        if inline int
        long
        mutable
        namespace new noexcept not not_eq nullptr
        operator or or_eq
        private protected public
        reflexpr register reinterpret_cast requires return
        short signed sizeof static static_assert static_cast struct switch synchronized
        template this thread_local throw try typedef typeid typename
        union unsigned using
        virtual void volatile
        wchar_t while
        xor xor_eq
    }
}